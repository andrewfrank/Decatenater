require(phytools)
#Start up, require packagesrequire(ape)require(spider)require(gtools)#Set working directory variableworkingdir=file.path("~/Dropbox/Squamate_Phylogeny/OriginalConcatenated/")#Set working directorysetwd(workingdir)#Produces a list of all of the phylip files in working directoryPhylipFileList=list.files(path=".", pattern = ".phy", all.files=FALSE, full.names=FALSE, recursive=TRUE, include.dirs=FALSE)#Loop over individual elements of PhylipFileListfor (i in 1:length(PhylipFileList)) {	#Read in individual phylip file in from PhyFileList	phydata=read.dna(PhylipFileList[i], format="sequential")	#Write phydata into FASTA format	write.dna(phydata, file=paste(PhylipFileList[i],".fasta",sep=""), format="fasta")#
}#Produces a list of all of the fasta files just made in working directoryFastaFileList=list.files(path=".", pattern = ".fasta", all.files=FALSE, full.names=FALSE, recursive=TRUE, include.dirs=FALSE)#Loop over individual elements of FastaFileListfor (j in 1:length(FastaFileList)) {	#Read in individual fasta files in from FastaFileList	fastadata=read.FASTA(file=paste(FastaFileList[j]))#
	#Write fastadata into nexus format	write.nexus.data(as.character(fastadata), file=paste(FastaListList[j],".nex",sep=""), interleaved=FALSE)#
}#Produces a list of all of the nexus files just made in the working directoryNexusFileList=list.files(path=".", pattern = ".nex", all.files=FALSE, full.names=TRUE, recursive=TRUE, include.dirs=FALSE)#Strips off extraneous file extensions in generated nexus files, replaces with just ".nex"#Needed because each loop adds an additional file extension onto the files generatedsapply(NexusFileList,FUN=function(eachPath) {	file.rename(from=eachPath,to=sub(pattern=".phy.fasta.nex",replacement=".nex",eachPath))})#Removes generated fasta files !!! not tested !!!file.remove("*.fasta")
#Start up, require packagessetwd("~/Dropbox/Squamate_Phylogeny/Wiens_Dryad_Data/")require(stringr)require(ggplot2)#Create variables for .csv filesgenes <- read.csv(file="Start_Stop_Positions_Sorted.csv", header = T)specimens <- read.csv("Groups2.csv", header=T, stringsAsFactors=F)setwd("/Users/Andrew/Dropbox/Squamate_Phylogeny/Wiens_Dryad_Data/PaupBasefreqsResults/")significance <- read.csv("PaupBasefreqs_Summary.csv", header=T, stringsAsFactors=F)#Establish group variablesoutgroup <- c()sphenodon <- c()agamid <- c()chamaeleon <- c()pleurodonta <- c()anguimorph <- c()serpentes <- c()scincid <- c()gekko <- c()#Populate group variables with Genus from those groupsfor (x in 1:171) {	if (specimens$Group[x]=="outgroup") {outgroup=c(outgroup,specimens$Genus[x])}	else if (specimens$Group[x]=="sphenodon") {sphenodon=c(sphenodon,specimens$Genus[x])}	else if (specimens$Group[x]=="agamid") {agamid=c(agamid,specimens$Genus[x])}		else if (specimens$Group[x]=="chamaeleon") {chamaeleon=c(chamae
leon,specimens$Genus[x])}		else if (specimens$Group[x]=="pleurodonta") {pleurodonta=c(pleurodonta,specimens$Genus[x])}		else if (specimens$Group[x]=="anguimorph") {anguimorph=c(anguimorph,specimens$Genus[x])}		else if (specimens$Group[x]=="serpentes") {serpentes=c(serpentes,specimens$Genus[x])}		else if (specimens$Group[x]=="scincid") {scincid=c(scincid,specimens$Genus[x])}		else if (specimens$Group[x]=="gekko") {gekko=c(gekko,specimens$Genus[x])}	}#Loop - gene name for variable ifor (i in 12:12) {	#Establish group positional dataframes	outgroupfirst <- data.frame(NULL)	outgroupsecond <- data.frame(NULL)	outgroupthird <- data.frame(NULL)	sphenodonfirst <- data.frame(NULL)	sphenodonsecond <- data.frame(NULL)	sphenodonthird <- data.frame(NULL)	agamidfirst <- data.frame(NULL)	agamidsecond <- data.frame(NULL)	agamidthird <- data.frame(NULL)	chamaeleonfirst <- data.frame(NULL)	chamaeleonsecond <- data.frame(NULL)	chamaeleonthird <- data.frame(NULL)	pleurodontafirst <- data.frame(NULL)
pleurodontasecond <- data.frame(NULL)	pleurodontathird <- data.frame(NULL)	anguimorphfirst <- data.frame(NULL)	anguimorphsecond <- data.frame(NULL)	anguimorphthird <- data.frame(NULL)	serpentesfirst <- data.frame(NULL)	serpentessecond <- data.frame(NULL)	serpentesthird <- data.frame(NULL)	scincidfirst <- data.frame(NULL)	scincidsecond <- data.frame(NULL)	scincidthird <- data.frame(NULL)	gekkofirst <- data.frame(NULL)	gekkosecond <- data.frame(NULL)	gekkothird <- data.frame(NULL)	#Set directory to taxa missing data files	setwd("~/Dropbox/Squamate_Phylogeny/Wiens_Dryad_Data/taxa_missing_data/")#
	#Read in the taxa missing data file	missingtaxa <- read.csv(file=paste(genes$Gene[i]," _missing_taxa.csv", sep=""), header = T)	#Set directory to PaupBasefreqs results files	setwd(paste("~/Dropbox/Squamate_Phylogeny/Wiens_Dryad_Data/PaupBasefreqsResults/PaupBasefreqs-",genes$Gene[i],"-i", sep=""))	#Read the basefreqs file for that gene	paupdata <- readLines(paste("basefreqs-",genes$Gene[i], sep=""))	for (j in 1:171) {#
		if (is.na(match(specimens$Full[j],missingtaxa$Species)) == TRUE) {#
			#Define the pattern agrep will use to find species names in paupdata			pattern <- specimens$FullS[j]#
			#Find the lines that give the raw base frequencies for one species using fuzzy grep			species <- agrep(pattern, max.distance = 0.2, fixed = TRUE, value=TRUE, paupdata)#
			#If a max.distance of 0.2 is too small for fuzzy grep to find a match, bump max.distance up to 0.35			if (length(species) == 0) {species <- agrep(pattern, max.distance = 0.35, fixed = TRUE, value=TRUE, paupdata)}		#
			#If a max.distance is still too small for fuzzy grep to find a match, bump max.distance up			if (length(species) == 0) {species <- agrep(pattern, max.distance = 0.45, fixed = TRUE, value=TRUE, paupdata)}				#
			speciesbases <- str_extract_all(species, "[0][.][0-9]+")#
			if (genes$Frame[i] == "1") {				firstposframe <- t(data.frame(as.numeric(speciesbases[[1]])))				row.names(firstposframe) <- paste(specimens$Genus[j],specimens$Species[j], sep=" ")				secondposframe <- t(data.frame(as.numeric(speciesbases[[3]])))				row.names(secondposframe) <- paste(specimens$Genus[j],specimens$Species[j], sep=" ")				thirdposframe <- t(data.frame(as.numeric(speciesbases[[5]])))				row.names(thirdposframe) <- paste(specimens$Genus[j],specimens$Species[j], sep=" ")			}			if (genes$Frame[i] == "2") {				firstposframe <- t(data.frame(as.numeric(speciesbases[[3]])))				row.names(firstposframe) <- paste(specimens$Genus[j],specimens$Species[j], sep=" ")				secondposframe <- t(data.frame(as.numeric(speciesbases[[5]])))				row.names(secondposframe) <- paste(specimens$Genus[j],specimens$Species[j], sep=" ")				thirdposframe <- t(data.frame(as.numeric(speciesbases[[1]])))				row.names(thirdposframe) <- paste(specimens$Genus[j],specimens$Species[j], sep=" ")						}			if (genes$Fram
e[i] == "3") {				firstposframe <- t(data.frame(as.numeric(speciesbases[[5]])))				row.names(firstposframe) <- paste(specimens$Genus[j],specimens$Species[j], sep=" ")				secondposframe <- t(data.frame(as.numeric(speciesbases[[1]])))				row.names(secondposframe) <- paste(specimens$Genus[j],specimens$Species[j], sep=" ")				thirdposframe <- t(data.frame(as.numeric(speciesbases[[3]])))				row.names(thirdposframe) <- paste(specimens$Genus[j],specimens$Species[j], sep=" ")						}#
			if (specimens$Genus[j] %in% outgroup) {				outgroupfirst <- rbind(outgroupfirst,firstposframe)				outgroupsecond <- rbind(outgroupsecond,secondposframe)				outgroupthird <- rbind(outgroupthird,thirdposframe)			} else if (specimens$Genus[j] %in% sphenodon) {				sphenodonfirst <- rbind(sphenodonfirst,firstposframe)				sphenodonsecond <- rbind(sphenodonsecond,secondposframe)				sphenodonthird <- rbind(sphenodonthird,thirdposframe)			} else if (specimens$Genus[j] %in% agamid) {				agamidfirst <- rbind(agamidfirst,firstposframe)				agamidsecond <- rbind(agamidsecond,secondposframe)				agamidthird <- rbind(agamidthird,thirdposframe)			} else if (specimens$Genus[j] %in% chamaeleon) {				chamaeleonfirst <- rbind(chamaeleonfirst,firstposframe)				chamaeleonsecond <- rbind(chamaeleonsecond,secondposframe)				chamaeleonthird <- rbind(chamaeleonthird,thirdposframe)			} else if (specimens$Genus[j] %in% pleurodonta) {				pleurodontafirst <- rbind(pleurodontafirst,firstposframe)				pleurodontasecond <
- rbind(pleurodontasecond,secondposframe)				pleurodontathird <- rbind(pleurodontathird,thirdposframe)			} else if (specimens$Genus[j] %in% anguimorph) {				anguimorphfirst <- rbind(anguimorphfirst,firstposframe)				anguimorphsecond <- rbind(anguimorphsecond,secondposframe)				anguimorphthird <- rbind(anguimorphthird,thirdposframe)			} else if (specimens$Genus[j] %in% serpentes) {				serpentesfirst <- rbind(serpentesfirst,firstposframe)				serpentessecond <- rbind(serpentessecond,secondposframe)				serpentesthird <- rbind(serpentesthird,thirdposframe)			} else if (specimens$Genus[j] %in% scincid) {				scincidfirst <- rbind(scincidfirst,firstposframe)				scincidsecond <- rbind(scincidsecond,secondposframe)				scincidthird <- rbind(scincidthird,thirdposframe)			} else if (specimens$Genus[j] %in% gekko) {				gekkofirst <- rbind(gekkofirst,firstposframe)				gekkosecond <- rbind(gekkosecond,secondposframe)				gekkothird <- rbind(gekkothird,thirdposframe)			}#
		}#
	}#
	#Set up individual group plots	outgroupfirstmeans <- data.frame(mean(outgroupfirst$V1), mean(outgroupfirst$V2), mean(outgroupfirst$V3), mean(outgroupfirst$V4), row.names="outgroupfirst")	names(outgroupfirstmeans)[1] <- paste("A") 	names(outgroupfirstmeans)[2] <- paste("C") 	names(outgroupfirstmeans)[3] <- paste("G")	names(outgroupfirstmeans)[4] <- paste("T") 	outgroupsecondmeans <- data.frame(mean(outgroupsecond$V1), mean(outgroupsecond$V2), mean(outgroupsecond$V3), mean(outgroupsecond$V4), row.names="outgroupsecond")	names(outgroupsecondmeans)[1] <- paste("A") 	names(outgroupsecondmeans)[2] <- paste("C") 	names(outgroupsecondmeans)[3] <- paste("G")	names(outgroupsecondmeans)[4] <- paste("T") 	outgroupthirdmeans <- data.frame(mean(outgroupthird$V1), mean(outgroupthird$V2), mean(outgroupthird$V3), mean(outgroupthird$V4), row.names="outgroupthird")	names(outgroupthirdmeans)[1] <- paste("A") 	names(outgroupthirdmeans)[2] <- paste("C") 	names(outgroupthirdmeans)[3] <- paste("G")	names(outgroupth
irdmeans)[4] <- paste("T") 	sphenodonfirstmeans <- data.frame(mean(sphenodonfirst$V1), mean(sphenodonfirst$V2), mean(sphenodonfirst$V3), mean(sphenodonfirst$V4), row.names="sphenodonfirst")	names(sphenodonfirstmeans)[1] <- paste("A") 	names(sphenodonfirstmeans)[2] <- paste("C") 	names(sphenodonfirstmeans)[3] <- paste("G")	names(sphenodonfirstmeans)[4] <- paste("T") 	sphenodonsecondmeans <- data.frame(mean(sphenodonsecond$V1), mean(sphenodonsecond$V2), mean(sphenodonsecond$V3), mean(sphenodonsecond$V4), row.names="sphenodonsecond")	names(sphenodonsecondmeans)[1] <- paste("A") 	names(sphenodonsecondmeans)[2] <- paste("C") 	names(sphenodonsecondmeans)[3] <- paste("G")	names(sphenodonsecondmeans)[4] <- paste("T") 	sphenodonthirdmeans <- data.frame(mean(sphenodonthird$V1), mean(sphenodonthird$V2), mean(sphenodonthird$V3), mean(sphenodonthird$V4), row.names="sphenodonthird")	names(sphenodonthirdmeans)[1] <- paste("A") 	names(sphenodonthirdmeans)[2] <- paste("C") 	names(sphenodonthirdmeans)[3] <- pa
ste("G")	names(sphenodonthirdmeans)[4] <- paste("T") #
	agamidfirstmeans <- data.frame(mean(agamidfirst$V1), mean(agamidfirst$V2), mean(agamidfirst$V3), mean(agamidfirst$V4), row.names="agamidfirst")	names(agamidfirstmeans)[1] <- paste("A") 	names(agamidfirstmeans)[2] <- paste("C") 	names(agamidfirstmeans)[3] <- paste("G")	names(agamidfirstmeans)[4] <- paste("T") 	agamidsecondmeans <- data.frame(mean(agamidsecond$V1), mean(agamidsecond$V2), mean(agamidsecond$V3), mean(agamidsecond$V4), row.names="agamidsecond")	names(agamidsecondmeans)[1] <- paste("A") 	names(agamidsecondmeans)[2] <- paste("C") 	names(agamidsecondmeans)[3] <- paste("G")	names(agamidsecondmeans)[4] <- paste("T") 	agamidthirdmeans <- data.frame(mean(agamidthird$V1), mean(agamidthird$V2), mean(agamidthird$V3), mean(agamidthird$V4), row.names="agamidthird")	names(agamidthirdmeans)[1] <- paste("A") 	names(agamidthirdmeans)[2] <- paste("C") 	names(agamidthirdmeans)[3] <- paste("G")	names(agamidthirdmeans)[4] <- paste("T") #
	chamaeleonfirstmeans <- data.frame(mean(chamaeleonfirst$V1), mean(chamaeleonfirst$V2), mean(chamaeleonfirst$V3), mean(chamaeleonfirst$V4), row.names="chamaeleonfirst")	names(chamaeleonfirstmeans)[1] <- paste("A") 	names(chamaeleonfirstmeans)[2] <- paste("C") 	names(chamaeleonfirstmeans)[3] <- paste("G")	names(chamaeleonfirstmeans)[4] <- paste("T") 	chamaeleonsecondmeans <- data.frame(mean(chamaeleonsecond$V1), mean(chamaeleonsecond$V2), mean(chamaeleonsecond$V3), mean(chamaeleonsecond$V4), row.names="chamaeleonsecond")	names(chamaeleonsecondmeans)[1] <- paste("A") 	names(chamaeleonsecondmeans)[2] <- paste("C") 	names(chamaeleonsecondmeans)[3] <- paste("G")	names(chamaeleonsecondmeans)[4] <- paste("T") 	chamaeleonthirdmeans <- data.frame(mean(chamaeleonthird$V1), mean(chamaeleonthird$V2), mean(chamaeleonthird$V3), mean(chamaeleonthird$V4), row.names="chamaeleonthird")	names(chamaeleonthirdmeans)[1] <- paste("A") 	names(chamaeleonthirdmeans)[2] <- paste("C") 	names(chamaeleonthirdmeans)[3] <- pa
ste("G")	names(chamaeleonthirdmeans)[4] <- paste("T") #
	pleurodontafirstmeans <- data.frame(mean(pleurodontafirst$V1), mean(pleurodontafirst$V2), mean(pleurodontafirst$V3), mean(pleurodontafirst$V4), row.names="pleurodontafirst")	names(pleurodontafirstmeans)[1] <- paste("A") 	names(pleurodontafirstmeans)[2] <- paste("C") 	names(pleurodontafirstmeans)[3] <- paste("G")	names(pleurodontafirstmeans)[4] <- paste("T") 	pleurodontasecondmeans <- data.frame(mean(pleurodontasecond$V1), mean(pleurodontasecond$V2), mean(pleurodontasecond$V3), mean(pleurodontasecond$V4), row.names="pleurodontasecond")	names(pleurodontasecondmeans)[1] <- paste("A") 	names(pleurodontasecondmeans)[2] <- paste("C") 	names(pleurodontasecondmeans)[3] <- paste("G")	names(pleurodontasecondmeans)[4] <- paste("T") 	pleurodontathirdmeans <- data.frame(mean(pleurodontathird$V1), mean(pleurodontathird$V2), mean(pleurodontathird$V3), mean(pleurodontathird$V4), row.names="pleurodontathird")	names(pleurodontathirdmeans)[1] <- paste("A") 	names(pleurodontathirdmeans)[2] <- paste("C") 	names(pl
eurodontathirdmeans)[3] <- paste("G")	names(pleurodontathirdmeans)[4] <- paste("T") 	anguimorphfirstmeans <- data.frame(mean(anguimorphfirst$V1), mean(anguimorphfirst$V2), mean(anguimorphfirst$V3), mean(anguimorphfirst$V4), row.names="anguimorphfirst")	names(anguimorphfirstmeans)[1] <- paste("A") 	names(anguimorphfirstmeans)[2] <- paste("C") 	names(anguimorphfirstmeans)[3] <- paste("G")	names(anguimorphfirstmeans)[4] <- paste("T") 	anguimorphsecondmeans <- data.frame(mean(anguimorphsecond$V1), mean(anguimorphsecond$V2), mean(anguimorphsecond$V3), mean(anguimorphsecond$V4), row.names="anguimorphsecond")	names(anguimorphsecondmeans)[1] <- paste("A") 	names(anguimorphsecondmeans)[2] <- paste("C") 	names(anguimorphsecondmeans)[3] <- paste("G")	names(anguimorphsecondmeans)[4] <- paste("T") 	anguimorphthirdmeans <- data.frame(mean(anguimorphthird$V1), mean(anguimorphthird$V2), mean(anguimorphthird$V3), mean(anguimorphthird$V4), row.names="anguimorphthird")	names(anguimorphthirdmeans)[1] <- paste("A"
) 	names(anguimorphthirdmeans)[2] <- paste("C") 	names(anguimorphthirdmeans)[3] <- paste("G")	names(anguimorphthirdmeans)[4] <- paste("T") 	serpentesfirstmeans <- data.frame(mean(serpentesfirst$V1), mean(serpentesfirst$V2), mean(serpentesfirst$V3), mean(serpentesfirst$V4), row.names="serpentesfirst")	names(serpentesfirstmeans)[1] <- paste("A") 	names(serpentesfirstmeans)[2] <- paste("C") 	names(serpentesfirstmeans)[3] <- paste("G")	names(serpentesfirstmeans)[4] <- paste("T") 	serpentessecondmeans <- data.frame(mean(serpentessecond$V1), mean(serpentessecond$V2), mean(serpentessecond$V3), mean(serpentessecond$V4), row.names="serpentessecond")	names(serpentessecondmeans)[1] <- paste("A") 	names(serpentessecondmeans)[2] <- paste("C") 	names(serpentessecondmeans)[3] <- paste("G")	names(serpentessecondmeans)[4] <- paste("T") 	serpentesthirdmeans <- data.frame(mean(serpentesthird$V1), mean(serpentesthird$V2), mean(serpentesthird$V3), mean(serpentesthird$V4), row.names="serpentesthird")	names(serpen
testhirdmeans)[1] <- paste("A") 	names(serpentesthirdmeans)[2] <- paste("C") 	names(serpentesthirdmeans)[3] <- paste("G")	names(serpentesthirdmeans)[4] <- paste("T") 	scincidfirstmeans <- data.frame(mean(scincidfirst$V1), mean(scincidfirst$V2), mean(scincidfirst$V3), mean(scincidfirst$V4), row.names="scincidfirst")	names(scincidfirstmeans)[1] <- paste("A") 	names(scincidfirstmeans)[2] <- paste("C") 	names(scincidfirstmeans)[3] <- paste("G")	names(scincidfirstmeans)[4] <- paste("T") 	scincidsecondmeans <- data.frame(mean(scincidsecond$V1), mean(scincidsecond$V2), mean(scincidsecond$V3), mean(scincidsecond$V4), row.names="scincidsecond")	names(scincidsecondmeans)[1] <- paste("A") 	names(scincidsecondmeans)[2] <- paste("C") 	names(scincidsecondmeans)[3] <- paste("G")	names(scincidsecondmeans)[4] <- paste("T") 	scincidthirdmeans <- data.frame(mean(scincidthird$V1), mean(scincidthird$V2), mean(scincidthird$V3), mean(scincidthird$V4), row.names="scincidthird")	names(scincidthirdmeans)[1] <- paste(
"A") 	names(scincidthirdmeans)[2] <- paste("C") 	names(scincidthirdmeans)[3] <- paste("G")	names(scincidthirdmeans)[4] <- paste("T") 	gekkofirstmeans <- data.frame(mean(gekkofirst$V1), mean(gekkofirst$V2), mean(gekkofirst$V3), mean(gekkofirst$V4), row.names="gekkofirst")	names(gekkofirstmeans)[1] <- paste("A") 	names(gekkofirstmeans)[2] <- paste("C") 	names(gekkofirstmeans)[3] <- paste("G")	names(gekkofirstmeans)[4] <- paste("T") 	gekkosecondmeans <- data.frame(mean(gekkosecond$V1), mean(gekkosecond$V2), mean(gekkosecond$V3), mean(gekkosecond$V4), row.names="gekkosecond")	names(gekkosecondmeans)[1] <- paste("A") 	names(gekkosecondmeans)[2] <- paste("C") 	names(gekkosecondmeans)[3] <- paste("G")	names(gekkosecondmeans)[4] <- paste("T") 	gekkothirdmeans <- data.frame(mean(gekkothird$V1), mean(gekkothird$V2), mean(gekkothird$V3), mean(gekkothird$V4), row.names="gekkothird")	names(gekkothirdmeans)[1] <- paste("A") 	names(gekkothirdmeans)[2] <- paste("C") 	names(gekkothirdmeans)[3] <- paste("G"
)	names(gekkothirdmeans)[4] <- paste("T")#
	allfirstmeans <- data.frame(NULL)#
	allfirstmeans <- rbind(allfirstmeans, outgroupfirstmeans)	allfirstmeans <- rbind(allfirstmeans, sphenodonfirstmeans)	allfirstmeans <- rbind(allfirstmeans, agamidfirstmeans)	allfirstmeans <- rbind(allfirstmeans, chamaeleonfirstmeans)	allfirstmeans <- rbind(allfirstmeans, pleurodontafirstmeans)	allfirstmeans <- rbind(allfirstmeans, anguimorphfirstmeans)	allfirstmeans <- rbind(allfirstmeans, serpentesfirstmeans)	allfirstmeans <- rbind(allfirstmeans, scincidfirstmeans)	allfirstmeans <- rbind(allfirstmeans, gekkofirstmeans)#
	allsecondmeans <- data.frame(NULL)#
	allsecondmeans <- rbind(allsecondmeans, outgroupsecondmeans)	allsecondmeans <- rbind(allsecondmeans, sphenodonsecondmeans)	allsecondmeans <- rbind(allsecondmeans, agamidsecondmeans)	allsecondmeans <- rbind(allsecondmeans, chamaeleonsecondmeans)	allsecondmeans <- rbind(allsecondmeans, pleurodontasecondmeans)	allsecondmeans <- rbind(allsecondmeans, anguimorphsecondmeans)	allsecondmeans <- rbind(allsecondmeans, serpentessecondmeans)	allsecondmeans <- rbind(allsecondmeans, scincidsecondmeans)	allsecondmeans <- rbind(allsecondmeans, gekkosecondmeans)#
	allthirdmeans <- data.frame(NULL)#
	allthirdmeans <- rbind(allthirdmeans, outgroupthirdmeans)	allthirdmeans <- rbind(allthirdmeans, sphenodonthirdmeans)	allthirdmeans <- rbind(allthirdmeans, agamidthirdmeans)	allthirdmeans <- rbind(allthirdmeans, chamaeleonthirdmeans)	allthirdmeans <- rbind(allthirdmeans, pleurodontathirdmeans)	allthirdmeans <- rbind(allthirdmeans, anguimorphthirdmeans)	allthirdmeans <- rbind(allthirdmeans, serpentesthirdmeans)	allthirdmeans <- rbind(allthirdmeans, scincidthirdmeans)	allthirdmeans <- rbind(allthirdmeans, gekkothirdmeans)#
	groups <- c("Outgroup", "Sphenodon", "Agamid", "Chameleon", "Pleurodonta", "Anguimorph", "Serpentes", "Scincid", "Gekko")#
	firsttitle <- c("First Position")	secondtitle <- c("Second Position")	thirdtitle <- c("Third Position")#
	if (significance$X1stpos[i] < 0.05) {firsttitle <- c("First Position*")}	if (significance$X2ndpos[i] < 0.05) {secondtitle <- c("Second Position*")}	if (significance$X3rdpos[i] < 0.05) {thirdtitle <- c("Third Position*")}#
	par(mfrow = c(3,1)) # sets up a window for 3 plots, 1 by 3.#
	barplot(		as.matrix(allfirstmeans), 		col=c("gray75","gray50","yellow4","yellowgreen","green4","red","blue","purple","orange"), 		ylim=c(0,0.5), 		main=firsttitle,		#legend.text=groups,		beside=TRUE)#
	barplot(		as.matrix(allsecondmeans), 		col=c("gray75","gray50","yellow4","yellowgreen","green4","red","blue","purple","orange"), 		ylim=c(0,0.5), 		main=secondtitle,		#legend.text=groups,		beside=TRUE)	barplot(		as.matrix(allthirdmeans), 		col=c("gray75","gray50","yellow4","yellowgreen","green4","red","blue","purple","orange"), 		ylim=c(0,0.5), 		main=thirdtitle,		legend.text=groups,		args.legend = list(horiz=TRUE, x="bottom", x.intersp=0.25, text.width=3.6, inset=-0.5),		beside=TRUE)#
	title(paste(genes$Gene[i], " Base Frequencies", sep=""), outer=TRUE, line=-1, cex=1.3)#
	#Set directory to PaupBasefreqs results files	setwd(paste("~/Dropbox/Squamate_Phylogeny/Wiens_Dryad_Data/PaupBasefreqsResults/Barplot_PDFs_Corrected/", sep=""))	quartz.save(file=paste(genes$Gene[i],".pdf",sep=""), type="PDF", dpi=300)#
	#Set directory to PaupBasefreqs results files	setwd(paste("~/Dropbox/Squamate_Phylogeny/Wiens_Dryad_Data/PaupBasefreqsResults/Barplot_PNGs_Corrected/", sep=""))	quartz.save(file=paste(genes$Gene[i],".png",sep=""), type="PNG", dpi=300)#
	dev.off()#
}
plotalign <- "GeneProp"#Set directory to destination directorysetwd(destinationdir)#Start PDF devicepdf(file="Amino Acid Characters.pdf", width=10, paper="USr")#For use in ConProp, set IguaniaAAsites and OriginalAAsites for the entire concatenated data set initially to emptyCONIguaniaAAsites <- c() #A list of all amino acids across the concatenated data set that support the Iguania rootCONOriginalAAsites <- c() #A list of all amino acids across the concatenated data set that support the original root#Loop through gene, except for FSTR5, which lacks dSSLS datafor (i in 1:43) {	##### SET UP AMINO ACID ALIGNMENT #####	#Get gene alignment data from the concatenated data set	gene <- data[,genes$Start[i]:genes$Stop[i]] #Use gene start and stop positions to define gene#
	#Set translation frames for seqinr - note that seqinr defines a second position start as "2" and a third position start as "1"	if (genes$Frame[i] == 1) {frame <- 0}	if (genes$Frame[i] == 2) {frame <- 2}	if (genes$Frame[i] == 3) {frame <- 1}#
	#Loop through each taxa in the alignment	for (j in 1:length(gene[,1])) {#
		#Use seqinr to translate that taxon's nucleotide sequence		AA <- translate(as.character(gene[j,]),frame=frame, ambiguous=FALSE)#
		#If looping through for the first time, create the AAalign dataframe and define the column names as each amino acid position number		if (j == 1) {#
			AAalign <- data.frame(t(AA), stringsAsFactors=FALSE)			colnames(AAalign) <- seq(1,length(AA),1)#
		#Otherwise rbind the amino acid translation for that taxon onto AAalign			} else if (j != 1) {#
			AAalign <- rbind(AAalign, AA)		}	}#
	#After AAalign has been created, define its row names using the taxa names from the original data set	rownames(AAalign) <- rownames(as.character(gene[,j]))#
	##### SET UP LIST OF AMINO ACID COMPOSITION PER AMINO ACID POSITION ######
	#Loop through the amino acid alignment to establish amino acid compositions per amino acid site	for (k in 1:length(AAalign)) {#
		#If looping through for the first time, create a list AAchar with the amino acid composition of the first amino acid position		if (k == 1) {AAchar <- list(table((AAalign[,k])))}		#Otherwise add the amino acid composition of each amino acid position to the list AAchar		else if (k != 1) {AAchar <- c(AAchar,list(table((AAalign[,k]))))}#
	}#
	##### SET UP LIST OF NEGATIVE INFORMATIVE SITES #####	#Using the constantsites reference variable, get the constant sites for this gene using the gene's start and stop positions	geneConstantSites <- constantsites[constantsites >= genes$Start[i] & constantsites <= genes$Stop[i]]#
	#Using the dSSLS reference variable...	genedSSLS <- dSSLS[genes$Start[i]:genes$Stop[i]] #Get the dSSLS values for this gene's sites,	genedSSLS <- genedSSLS[-geneConstantSites] #Then take out the constant sites	neggenedSSLS <- genedSSLS[,genedSSLS < 0] #Then only include sites that support the Iguania root (are negative)	#Convert neggenedSSLS to a vector of numeric values called NegativeInformativeSites	NegativeInformativeSites <- as.numeric(colnames(neggenedSSLS))#
	##### SET UP DATA FRAMES OF AMINO ACID COMPOSITION PER AMINO ACID POSITION FOR DIFFERENT ROOTS ######
	#Create empty lists...		IguaniaAA <- c() #Empty list of amino acid composition of sites supporting the Iguania root	OriginalAA <- c() #Empty list of amino acid composition of sites supporting the original root	IguaniaAAsites <- c() #Empty list of just amino acid positions supporting the Iguania root	OriginalAAsites <- c() #Empty list of just amino acid positions supporting the original root#
	## Used for ConProp to establish gene positions for amino acids for the entire concatenated data set###
	#If looping through gene for the first time...	if (i == 1) {		AAstart <- 1 #The first amino acid position for this gene is "1"		AAcount <- length(AAalign) #The last amino acid position for this gene is length of amino acids in this gene	#Otherwise...	} else if (i != 1) {		AAstart <- AAstart + AAcount #The first amino acid position for this gene is the start position of the previous gene plus the last amino acid position of the previous gene		AAcount <- length(AAalign)	}#
	#Loop through the amino acid alignment to establish whether that amino acid supports the Iguania root or the original root	for (l in 1:length(AAalign)) {#
		#Split the current amino acid position (defined as "l") into its 3 constituent nucleotide positions		firstposition <- ((3*l)-2) + (genes$Start[i] - 1)		secondposition <- ((3*l)-1) + (genes$Start[i] - 1)		thirdposition <- (3*l) + (genes$Start[i] - 1)#
		#Adjust nucleotide positions according to this gene's reading frame		if (genes$Frame[i] == 1) {			firstposition <- firstposition			secondposition <- secondposition			thirdposition <- thirdposition		}		if (genes$Frame[i] == 2) {						firstposition <- secondposition			secondposition <- thirdposition			thirdposition <- firstposition		}		if (genes$Frame[i] == 3) {						firstposition <- thirdposition			secondposition <- firstposition			thirdposition <- secondposition		}		#If ANY of the nucleotide positions contributing to the current amino acid position support the Iguania root...		if (firstposition %in% NegativeInformativeSites | 			secondposition %in% NegativeInformativeSites | 			thirdposition %in% NegativeInformativeSites == TRUE) {#
			IguaniaAA <- c(IguaniaAA,AAchar[l]) #Add the amino acid composition for this amino acid site to the IguaniaAA list			IguaniaAAsites <- c(IguaniaAAsites,l) #Add this amino acid position to the IguaniaAAsites list#
			CONIguaniaAAsites <- c(CONIguaniaAAsites,(l + (AAstart - 1))) #For use with ConProp, add this amino acid position to the CONIguaniaAAsites list		#If NONE of the nucleotide positions contributing to the current amino acid position support the Iguania root...				} else if ((firstposition %in% NegativeInformativeSites && 			secondposition %in% NegativeInformativeSites && 			thirdposition %in% NegativeInformativeSites) == FALSE) {#
			OriginalAA <- c(OriginalAA,AAchar[l]) #Add the amino acid composition for this amino acid site to the OriginalAA list			OriginalAAsites <- c(OriginalAAsites,l) #Add this amino acid position to the OriginalAAsites list#
			CONOriginalAAsites <- c(CONOriginalAAsites,(l + (AAstart - 1))) #For use with ConProp, add this amino acid position to the CONOriginalAAsites list		}	}#
	## Build data frames from lists of amino acid composition for the Iguania root supporting amino acids and original root supporting amino acids ###
	#Loop through the Iguania amino acid composition list	for (m in 1:length(IguaniaAA)) {#
		#If looping through for the first time...		if (m == 1) {			temp1 <- data.frame(IguaniaAA[m]) #Define temp1 as a data frame of the first amino acid composition table of the list			temp2 <- t(data.frame(temp1[,2], row.names=temp1[,1])) #Transpose this data frame as temp2, using the first column as the row names of the transposed data frame			IguaniaAAdf <- temp2 #This transposed data frame starts the Iguania amino acid composition data frame			rownames(IguaniaAAdf) <- paste("AA Site ",IguaniaAAsites[1:m], sep="") #Name the row for the amino acid position		#Otherwise...		} else if (m != 1) {			temp1 <- data.frame(IguaniaAA[m]) #Define temp1 as a data frame of the current (m) amino acid composition table of the list			temp2 <- t(data.frame(temp1[,2], row.names=temp1[,1])) #Transpose this data frame as temp2, using the first column as the row names of the transposed data frame			IguaniaAAdf <- rbind.fill.matrix(IguaniaAAdf, temp2) #Use plyr's special rbind to place this data frame onto the Iguania am
ino acid composition data frame, inserting NAs for amino acids that are not present			rownames(IguaniaAAdf) <- paste("AA Site ",IguaniaAAsites[1:m], sep="") #Name the new row for the amino acid position		}	}#
	#Loop through the original amino acid composition list (each step is the same for the Iguania amino acid data frame loop)	for (n in 1:length(OriginalAA)) {#
		if (n == 1) {			temp3 <- data.frame(OriginalAA[n])			temp4 <- t(data.frame(temp3[,2], row.names=temp3[,1]))			OriginalAAdf <- temp4			rownames(OriginalAAdf) <- paste("AA Site ",OriginalAAsites[1:n], sep="")		} else if (n != 1) {			temp3 <- data.frame(OriginalAA[n])			temp4 <- t(data.frame(temp3[,2], row.names=temp3[,1]))			OriginalAAdf <- rbind.fill.matrix(OriginalAAdf, temp4)			rownames(OriginalAAdf) <- paste("AA Site ",OriginalAAsites[1:n], sep="")		}	}#
	#Replace NAs placed by rbind.fill.matrix with zeros	IguaniaAAdf[is.na(IguaniaAAdf)] <- 0	OriginalAAdf[is.na(OriginalAAdf)] <- 0	#
	#Establish variable with list of amino acids in order of type/group	aminoacids <- c("X","R","H","K","D","E","S","T","N","Q","C","U","G","P","A","V","I","L","M","F","Y","W")#
	## If any amino acid is absent from the gene, this loop puts it in for data consistency ###
	#Loop through the list of amino acids	for (o in 1:length(aminoacids)) {#
		#Define placement as a particular amino acid from the list		placement <- aminoacids[o]		#If that amino acid doesn't appear in the Iguania amino acid composition data frame...		if (placement %in% colnames(IguaniaAAdf) == FALSE) {			addon <- data.frame(placement=rep.int(0, length(IguaniaAAdf[,1]))) #Make a data frame for the missing amino acid with the same number of rows as the Iguania amino acid composition data frame			IguaniaAAdf <- data.frame(IguaniaAAdf,addon) #Redefine the Iguania amino acid composition data frame to include the missing amino acid data frame			colnames(IguaniaAAdf)[length(IguaniaAAdf[1,])] <- as.character(placement) #Adjust the column name to reflect the name of the inserted missing amino acid		}		#If that amino acid doesn't appear in the original amino acid composition data frame...	(each step is the same for the Iguania amino acid data frame loop)		if (placement %in% colnames(OriginalAAdf) == FALSE) {			addon <- data.frame(placement=rep.int(0, length(OriginalAAdf[,1])))
OriginalAAdf <- data.frame(OriginalAAdf,addon)			colnames(OriginalAAdf)[length(OriginalAAdf[1,])] <- as.character(placement)		}	}#
	#Reorder the data frames to the same amino acid order	IguaniaAAdf <- IguaniaAAdf[,c("X","R","H","K","D","E","S","T","N","Q","C","U","G","P","A","V","I","L","M","F","Y","W")]	OriginalAAdf <- OriginalAAdf[,c("X","R","H","K","D","E","S","T","N","Q","C","U","G","P","A","V","I","L","M","F","Y","W")]#
	## For use in ConProp ###
	#If looping through the first gene, establish the concatenated version of IguaniaAAdf and OriginalAAdf	if (i == 1) {		CONIguaniaAAdf <- IguaniaAAdf		CONOriginalAAdf <- OriginalAAdf	#Otherwise, rbind each gene's IguaniaAAdf and OriginalAAdf onto the concatenated versions of the data frames, and adjust row names per amino acid site	} else if (i != 1) {		CONIguaniaAAdf <- rbind(CONIguaniaAAdf,IguaniaAAdf)		rownames(CONIguaniaAAdf) <- paste("AA Site ",CONIguaniaAAsites, sep="")		CONOriginalAAdf <- rbind(CONOriginalAAdf,OriginalAAdf)		rownames(CONOriginalAAdf) <- paste("AA Site ",CONOriginalAAsites, sep="")	}#
	##### SET UP AMINO ACID GROUPS TO GRAPH ######
	## Iguania root supporting variables ###
	#Create data frames for different groups that add together different columns...	IGambiguousAA <- IguaniaAAdf[,"X"] #All ambiguous amino acids	IGpositiveAA <- IguaniaAAdf[,"R"] + IguaniaAAdf[,"H"] + IguaniaAAdf[,"K"] #Positive amino acids	IGnegativeAA <- IguaniaAAdf[,"D"] + IguaniaAAdf[,"E"] #Negative amino acids	IGpolarAA <- IguaniaAAdf[,"S"] + IguaniaAAdf[,"T"] + IguaniaAAdf[,"N"] + IguaniaAAdf[,"Q"] #Polar amino acids	IGspecialAA <- IguaniaAAdf[,"C"] + IguaniaAAdf[,"U"] + IguaniaAAdf[,"G"] + IguaniaAAdf[,"P"] #Special amino acids	IGhydrophobicAA <- IguaniaAAdf[,"A"] + IguaniaAAdf[,"V"] + IguaniaAAdf[,"I"] + IguaniaAAdf[,"L"] + IguaniaAAdf[,"M"] + IguaniaAAdf[,"F"] + IguaniaAAdf[,"Y"] + IguaniaAAdf[,"W"] #All hydrophobic amino acids	IGhydrophilicAA <- IGpositiveAA + IGnegativeAA + IGpolarAA + IGspecialAA #All hydrophilic amino acids	IGallAA <- IGhydrophobicAA + IGhydrophilicAA #All amino acids not ambiguous	#Create a data frame for graphing of ambiguous versus all other amino acids	AllIguaniaAA
df <- data.frame(IGambiguousAA, IGallAA)	rownames(AllIguaniaAAdf) <- paste("AA Site ",IguaniaAAsites, sep="")	colnames(AllIguaniaAAdf) <- c("X (Missing)","Amino Acids")	#Create a data frame for graphing of different amino acid groups	GroupedIguaniaAAdf <- data.frame(IGambiguousAA,IGpositiveAA,IGnegativeAA,IGpolarAA,IGspecialAA,IGhydrophobicAA)	rownames(GroupedIguaniaAAdf) <- paste("AA Site ",IguaniaAAsites, sep="")	colnames(GroupedIguaniaAAdf) <- c("X", "Positive", "Negative", "Polar", "Special", "Hydrophobic")	#Create a data frame for graphing of hydrophilic versus hydrophobic amino acid groups		HydroIguaniaAAdf <- data.frame(IGambiguousAA,IGhydrophilicAA,IGhydrophobicAA)	rownames(HydroIguaniaAAdf) <- paste("AA Site ",IguaniaAAsites, sep="")	colnames(HydroIguaniaAAdf) <- c("X", "Hydrophilic", "Hydrophobic")	## Original root supporting variables (each step is the same for the Iguania root data frames) ###
	ORambiguousAA <- OriginalAAdf[,"X"]	ORpositiveAA <- OriginalAAdf[,"R"] + OriginalAAdf[,"H"] + OriginalAAdf[,"K"]	ORnegativeAA <- OriginalAAdf[,"D"] + OriginalAAdf[,"E"]	ORpolarAA <- OriginalAAdf[,"S"] + OriginalAAdf[,"T"] + OriginalAAdf[,"N"] + OriginalAAdf[,"Q"]	ORspecialAA <- OriginalAAdf[,"C"] + OriginalAAdf[,"U"] + OriginalAAdf[,"G"] + OriginalAAdf[,"P"]	ORhydrophobicAA <- OriginalAAdf[,"A"] + OriginalAAdf[,"V"] + OriginalAAdf[,"I"] + OriginalAAdf[,"L"] + OriginalAAdf[,"M"] + OriginalAAdf[,"F"] + OriginalAAdf[,"Y"] + OriginalAAdf[,"W"]	ORhydrophilicAA <- ORpositiveAA + ORnegativeAA + ORpolarAA + ORspecialAA	ORallAA <- ORhydrophobicAA + ORhydrophilicAA#
	AllOriginalAAdf <- data.frame(ORambiguousAA, ORallAA)	rownames(AllOriginalAAdf) <- paste("AA Site ",OriginalAAsites, sep="")	colnames(AllOriginalAAdf) <- c("X (Missing)","Amino Acids")	GroupedOriginalAAdf <- data.frame(ORambiguousAA,ORpositiveAA,ORnegativeAA,ORpolarAA,ORspecialAA,ORhydrophobicAA)	rownames(GroupedOriginalAAdf) <- paste("AA Site ",OriginalAAsites, sep="")	colnames(GroupedOriginalAAdf) <- c("X", "Positive", "Negative", "Polar", "Special", "Hydrophobic")#
	HydroOriginalAAdf <- data.frame(ORambiguousAA,ORhydrophilicAA,ORhydrophobicAA)	rownames(HydroOriginalAAdf) <- paste("AA Site ",OriginalAAsites, sep="")	colnames(HydroOriginalAAdf) <- c("X", "Hydrophilic", "Hydrophobic")#
	#Establish colors for individual amino acids	colors <- c("black",			"magenta2","magenta3","magenta4",			"orange","orange3",			"lightsteelblue1","lightsteelblue2","lightsteelblue3","lightsteelblue4",			"greenyellow","green2","green3","green4",			"deepskyblue1","deepskyblue2","deepskyblue3","deepskyblue4",			"dodgerblue1","dodgerblue2","dodgerblue3","dodgerblue4")#
	if (plotalign == "Align") {		legendxpos <- length(OriginalAAdf[,1]) + (length(OriginalAAdf[,1])/3)		layout(matrix(c(0,0,0,1,2,9,3,4,9,5,6,9,7,8,9), 5, 3, byrow = TRUE), heights=c(0.1,1,1,1,1), widths=c(0.45,0.45,0.1))		par(xaxt="n", yaxt="n", mgp = c(0, 0, 0), mai=c(0.15,0.15,0.15,0.15), cex.lab=1.00)#
		barplot(t(IguaniaAAdf[,1]), 			col="black", 			border=FALSE,			ylim=c(0,171),			ylab="Missing Data / Site",			space=0.05)#
		barplot(t(OriginalAAdf[,1]), 			col="black", 			border=FALSE, 			space=0.05,			ylim=c(0,171),			legend.text=c("X (Missing)","Amino Acids"),			args.legend=list(x=legendxpos, y=180, xpd=NA, ncol=1, bty="n", fill=c("white","black"))) #
		barplot(t(IguaniaAAdf), 			col=colors, 			border=FALSE, 			ylim=c(0,171),			ylab="Amino Acid / Site",			space=0.05)#
		barplot(t(OriginalAAdf), 			col=colors, 			border=FALSE, 			space=0.05,			ylim=c(0,171),			legend=TRUE,			args.legend=list(x=legendxpos - (length(OriginalAAdf[,1])/30),y=180,xpd=NA, ncol=2, bty="n")) #
		barplot(t(GroupedIguaniaAAdf), 			col=c("black","purple","orange","lightsteelblue","forestgreen","blue"), 			border=FALSE, 			ylim=c(0,171),			ylab="Type / Site",			space=0.05)		barplot(t(GroupedOriginalAAdf), 			col=c("black","purple","orange","lightsteelblue","forestgreen","blue"), 			border=FALSE, 			space=0.05,			ylim=c(0,171),			legend=c("X","Positive","Negative","Polar","Special","Hydrophobic"),			args.legend=list(x=legendxpos,y=180,xpd=NA, ncol=1, bty="n")) #
		barplot(t(HydroIguaniaAAdf), 			col=c("black","red","blue"), 			border=FALSE, 			ylim=c(0,171),			ylab="Hydrophobicity / Site",			xlab="Amino Acid Site Supporting an Iguania Root",			space=0.05)#
		barplot(t(HydroOriginalAAdf), 			col=c("black","red","blue"), 			border=FALSE, 			ylim=c(0,171),			xlab="Amino Acid Site Supporting a Dibamid + Gekkota Root",			space=0.05,			legend=c("X","Hydrophilic","Hydrophobic"),			args.legend=list(x=legendxpos,y=180,xpd=NA, ncol=1, bty="n")) #
		title(main=paste(genes$Gene[i]," Amino Acid Characteristics Per Amino Acid Site (Only Amino Acids Containing an Informative Site)",sep=""), outer=TRUE, line=-1, cex.main=1.5)	#
	} else if (plotalign == "GeneProp") {#
		types <- c("X", "Positive", "Negative", "Polar", "Special", "Hydrophobic")		sig <- c()#
		for (p in 1:length(types)) {#
			my.df.ig <- GroupedIguaniaAAdf[p]			my.df.ig$AllOtherSites <- rowSums(GroupedIguaniaAAdf[-p])			colSums(my.df.ig)#
			my.df.or <- GroupedOriginalAAdf[p]			my.df.or$AllOtherSites <- rowSums(GroupedOriginalAAdf[-p])			colSums(my.df.or)#
			my.df.co <- t(data.frame(colSums(my.df.ig), colSums(my.df.or)))			row.names(my.df.co) <- c("Iguania", "Original")#
			by.type.result <- fisher.test(my.df.co)#
			sig <- c(sig, by.type.result[3])#
		}		my.df.ov <- t(data.frame(colSums(GroupedIguaniaAAdf), colSums(GroupedOriginalAAdf)))#
		overall.result <- chisq.test(my.df.ov, workspace=200000000)		sig <- c(sig, overall.result[3])#
		results.df <- t(data.frame(sig))#
		hydro <- c("X","Hydrophilic","Hydrophobic")		for (q in 2:2) {#
			my.df.ig <- HydroIguaniaAAdf[q]			my.df.ig$AllOtherSites <- rowSums(HydroIguaniaAAdf[-q])			colSums(my.df.ig)#
			my.df.or <- HydroOriginalAAdf[q]			my.df.or$AllOtherSites <- rowSums(HydroOriginalAAdf[-q])			colSums(my.df.or)#
			my.df.co <- t(data.frame(colSums(my.df.ig), colSums(my.df.or)))			row.names(my.df.co) <- c("Iguania", "Original")#
			by.type.result <- fisher.test(my.df.co)#
			sig <- c(sig, by.type.result[3])#
		}#
		my.df.ov <- t(data.frame(colSums(HydroIguaniaAAdf), colSums(HydroOriginalAAdf)))#
		overall.result <- chisq.test(my.df.ov, workspace=20000000)		sig <- c(sig, overall.result[3])#
		results.df <- t(data.frame(sig))		row.names(results.df) <- c(types,"Overall Types",hydro[2],"Overall Hydro")		colnames(results.df) <- paste(genes$Gene[i],"pvalues",sep="_")#
		results.df[,1] <- p.adjust(results.df)#
		if (i == 1) {overall.results.df <- results.df}		if (i != 1) {overall.results.df <- cbind(overall.results.df,results.df)}		if (i == 43) {write.csv(overall.results.df, file=file.path(destinationdir,"corrected_fisher_pvalues.csv"))}		layout(matrix(c(0,0,1,2,3,4,5,6,7,8), 5, 2, byrow = TRUE), heights=c(0.1,1,1,1,1), widths=c(0.5,0.5))		par(mgp = c(2, 1, 0), mai=c(0.45,0.45,0.45,0.45), cex.lab=1.0, cex.axis=0.9)		barplot(colSums(AllIguaniaAAdf) / (length(IguaniaAAdf[,1]) * 171),			col=c("black","white"), 			ylim=c(0,1),			ylab="Proportion, Missing Data")		barplot(colSums(AllOriginalAAdf) / (length(OriginalAAdf[,1]) * 171),			ylim=c(0,1),			col=c("black","white"))#
		barplot(colSums(IguaniaAAdf) / (length(IguaniaAAdf[,1]) * 171),			col=colors, 			ylim=c(0,1),			ylab="Proportion, Amino Acids")#
		barplot(colSums(OriginalAAdf) / (length(OriginalAAdf[,1]) * 171),			ylim=c(0,1),			col=colors)#
		barplot(colSums(GroupedIguaniaAAdf) / (length(IguaniaAAdf[,1]) * 171),			col=c("black","purple","orange","lightsteelblue","forestgreen","blue"), 			ylim=c(0,1),			ylab="Proportion, Type")#
		barplot(colSums(GroupedOriginalAAdf) / (length(OriginalAAdf[,1]) * 171),			ylim=c(0,1),			col=c("black","purple","orange","lightsteelblue","forestgreen","blue"))#
		barplot(colSums(HydroIguaniaAAdf) / (length(IguaniaAAdf[,1]) * 171),			ylim=c(0,1),			col=c("black","red","blue"),			xlab="Amino Acid Site Supporting an Iguania Root",			ylab="Proportion, Hydrophobicity")#
		barplot(colSums(HydroOriginalAAdf) / (length(OriginalAAdf[,1]) * 171),			col=c("black","red","blue"),			ylim=c(0,1),			xlab="Amino Acid Site Supporting a Dibamid + Gekkota Root")#
		title(main=paste(genes$Gene[i]," Proportional Amino Acid Characteristics (Only Amino Acids Containing an Informative Site)",sep=""), outer=TRUE, line=-1, cex.main=1.5)		} else if (plotalign == "ConProp") {#
		if (i == 43) {#
			IguaniaAAdf <- CONIguaniaAAdf			OriginalAAdf <- CONOriginalAAdf#
			IguaniaAAsites <- CONIguaniaAAsites			OriginalAAsites <- CONOriginalAAsites#
			IGambiguousAA <- IguaniaAAdf[,"X"]			IGpositiveAA <- IguaniaAAdf[,"R"] + IguaniaAAdf[,"H"] + IguaniaAAdf[,"K"]			IGnegativeAA <- IguaniaAAdf[,"D"] + IguaniaAAdf[,"E"]			IGpolarAA <- IguaniaAAdf[,"S"] + IguaniaAAdf[,"T"] + IguaniaAAdf[,"N"] + IguaniaAAdf[,"Q"]			IGspecialAA <- IguaniaAAdf[,"C"] + IguaniaAAdf[,"U"] + IguaniaAAdf[,"G"] + IguaniaAAdf[,"P"]			IGhydrophobicAA <- IguaniaAAdf[,"A"] + IguaniaAAdf[,"V"] + IguaniaAAdf[,"I"] + IguaniaAAdf[,"L"] + IguaniaAAdf[,"M"] + IguaniaAAdf[,"F"] + IguaniaAAdf[,"Y"] + IguaniaAAdf[,"W"]			IGhydrophilicAA <- IGpositiveAA + IGnegativeAA + IGpolarAA + IGspecialAA			IGallAA <- IGhydrophobicAA + IGhydrophilicAA			AllIguaniaAAdf <- data.frame(IGambiguousAA, IGallAA)			rownames(AllIguaniaAAdf) <- paste("AA Site ",IguaniaAAsites, sep="")			colnames(AllIguaniaAAdf) <- c("X (Missing)","Amino Acids")			GroupedIguaniaAAdf <- data.frame(IGambiguousAA,IGpositiveAA,IGnegativeAA,IGpolarAA,IGspecialAA,IGhydrophobicAA)			rownames(GroupedIguaniaAAdf) <- paste("AA Site
",IguaniaAAsites, sep="")			colnames(GroupedIguaniaAAdf) <- c("X", "Positive", "Negative", "Polar", "Special", "Hydrophobic")#
			HydroIguaniaAAdf <- data.frame(IGambiguousAA,IGhydrophilicAA,IGhydrophobicAA)			rownames(HydroIguaniaAAdf) <- paste("AA Site ",IguaniaAAsites, sep="")			colnames(HydroIguaniaAAdf) <- c("X", "Hydrophilic", "Hydrophobic")#
			ORambiguousAA <- OriginalAAdf[,"X"]			ORpositiveAA <- OriginalAAdf[,"R"] + OriginalAAdf[,"H"] + OriginalAAdf[,"K"]			ORnegativeAA <- OriginalAAdf[,"D"] + OriginalAAdf[,"E"]			ORpolarAA <- OriginalAAdf[,"S"] + OriginalAAdf[,"T"] + OriginalAAdf[,"N"] + OriginalAAdf[,"Q"]			ORspecialAA <- OriginalAAdf[,"C"] + OriginalAAdf[,"U"] + OriginalAAdf[,"G"] + OriginalAAdf[,"P"]			ORhydrophobicAA <- OriginalAAdf[,"A"] + OriginalAAdf[,"V"] + OriginalAAdf[,"I"] + OriginalAAdf[,"L"] + OriginalAAdf[,"M"] + OriginalAAdf[,"F"] + OriginalAAdf[,"Y"] + OriginalAAdf[,"W"]			ORhydrophilicAA <- ORpositiveAA + ORnegativeAA + ORpolarAA + ORspecialAA			ORallAA <- ORhydrophobicAA + ORhydrophilicAA#
			AllOriginalAAdf <- data.frame(ORambiguousAA, ORallAA)			rownames(AllOriginalAAdf) <- paste("AA Site ",OriginalAAsites, sep="")			colnames(AllOriginalAAdf) <- c("X (Missing)","Amino Acids")			GroupedOriginalAAdf <- data.frame(ORambiguousAA,ORpositiveAA,ORnegativeAA,ORpolarAA,ORspecialAA,ORhydrophobicAA)			rownames(GroupedOriginalAAdf) <- paste("AA Site ",OriginalAAsites, sep="")			colnames(GroupedOriginalAAdf) <- c("X", "Positive", "Negative", "Polar", "Special", "Hydrophobic")#
			HydroOriginalAAdf <- data.frame(ORambiguousAA,ORhydrophilicAA,ORhydrophobicAA)			rownames(HydroOriginalAAdf) <- paste("AA Site ",OriginalAAsites, sep="")			colnames(HydroOriginalAAdf) <- c("X", "Hydrophilic", "Hydrophobic")			layout(matrix(c(0,0,1,2,3,4,5,6,7,8), 5, 2, byrow = TRUE), heights=c(0.1,1,1,1,1), widths=c(0.5,0.5))			par(mgp = c(2, 1, 0), mai=c(0.45,0.45,0.45,0.45), cex.lab=1.0, cex.axis=0.9)			barplot(colSums(AllIguaniaAAdf) / (length(IguaniaAAdf[,1]) * 171),				col=c("black","white"), 				ylim=c(0,1),				ylab="Proportion, Missing Data")			barplot(colSums(AllOriginalAAdf) / (length(OriginalAAdf[,1]) * 171),				ylim=c(0,1),				col=c("black","white"))#
			barplot(colSums(IguaniaAAdf) / (length(IguaniaAAdf[,1]) * 171),				col=colors, 				ylim=c(0,1),				ylab="Proportion, Amino Acids")#
			barplot(colSums(OriginalAAdf) / (length(OriginalAAdf[,1]) * 171),				ylim=c(0,1),				col=colors)#
			barplot(colSums(GroupedIguaniaAAdf) / (length(IguaniaAAdf[,1]) * 171),				col=c("black","purple","orange","lightsteelblue","forestgreen","blue"), 				ylim=c(0,1),				ylab="Proportion, Type")#
			barplot(colSums(GroupedOriginalAAdf) / (length(OriginalAAdf[,1]) * 171),				ylim=c(0,1),				col=c("black","purple","orange","lightsteelblue","forestgreen","blue"))#
			barplot(colSums(HydroIguaniaAAdf) / (length(IguaniaAAdf[,1]) * 171),				ylim=c(0,1),				col=c("black","red","blue"),				xlab="Amino Acid Site Supporting an Iguania Root",				ylab="Proportion, Hydrophobicity")#
			barplot(colSums(HydroOriginalAAdf) / (length(OriginalAAdf[,1]) * 171),				col=c("black","red","blue"),				ylim=c(0,1),				xlab="Amino Acid Site Supporting a Dibamid + Gekkota Root")#
			title(main=paste("Concatenated Proportional Amino Acid Characteristics (Only Amino Acids Containing an Informative Site)",sep=""), outer=TRUE, line=-1, cex.main=1.5)	#
		}#
	}}dev.off()
?try
?readLine
?readline
fun <- function(){  x <- readline("What is the value of x?")    y <- readline("What is the value of y?")  t <- readline("What are the T values?")  v <- readline("What are the V values?")  x <- as.numeric(unlist(strsplit(x, ",")))  y <- as.numeric(unlist(strsplit(y, ",")))  t <- as.numeric(unlist(strsplit(t, ",")))  v <- as.numeric(unlist(strsplit(v, ",")))  out1 <- x + y  out2 <- t + v  return(list(out1, out2))}
fun
if(interactive()) fun()
?return
fun <- function(){#
	gene.num <- readline("How many genes are in your concatenated alignment?") #
	for (i in 1:x) {#
		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#
		gene.pos <- list(gene.pos,c(start.pos,last.pos))#
	}	return(gene.pos)}
if(interactive()) fun()
fun <- function(){#
	gene.num <- readline("How many genes are in your concatenated alignment?") #
	for (i in 1:gene.num) {#
		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#
		gene.pos <- list(gene.pos,c(start.pos,last.pos))#
	}	return(gene.pos)}
if(interactive()) fun()
fun <- function(){#
	gene.num <- readline("How many genes are in your concatenated alignment?") #
	for (i in 1:gene.num) {#
		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#
		if (exists("gene.pos") == FALSE) {gene.pos <- c(start.pos,last.pos)}		if (exists("gene.pos") == TRUE) {gene.pos <- list(gene.pos,c(start.pos,last.pos))}		#
	}	return(gene.pos)}
if(interactive()) fun()
fun <- function(){#
	gene.num <- readline("How many genes are in your concatenated alignment?") #
	for (i in 1:gene.num) {#
		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#
		if (exists("gene.pos") == FALSE) {gene.pos <- c(start.pos,last.pos)}		else if (exists("gene.pos") == TRUE) {gene.pos <- list(gene.pos,c(start.pos,last.pos))}		#
	}	return(gene.pos)}
if(interactive()) fun()
fun <- function(){#
	gene.num <- readline("How many genes are in your concatenated alignment?") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment.") #
#	for (i in 1:gene.num) {#  #		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))#		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#  	#		if (exists("gene.pos") == FALSE) {gene.pos <- c(start.pos,last.pos)}#		else if (exists("gene.pos") == TRUE) {gene.pos <- list(gene.pos,c(start.pos,last.pos))}		#  	#	}#	return(gene.pos)}
if(interactive()) fun()
fun <- function(){#
	gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.")   	gene.names <- as.numeric(unlist(strsplit(gene.names, ",")))    	gene.lengths <- as.numeric(unlist(strsplit(gene.lengths, ",")))#
#	for (i in 1:gene.num) {#  #		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))#		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#  	#		if (exists("gene.pos") == FALSE) {gene.pos <- c(start.pos,last.pos)}#		else if (exists("gene.pos") == TRUE) {gene.pos <- list(gene.pos,c(start.pos,last.pos))}		#  	#	}#	return(gene.pos)}
if(interactive()) fun()
fun <- function(){#
	gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.")   	gene.names <- as.numeric(unlist(strsplit(gene.names, ",")))    	gene.lengths <- as.numeric(unlist(strsplit(gene.lengths, ",")))#
#	for (i in 1:gene.num) {#  #		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))#		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#  	#		if (exists("gene.pos") == FALSE) {gene.pos <- c(start.pos,last.pos)}#		else if (exists("gene.pos") == TRUE) {gene.pos <- list(gene.pos,c(start.pos,last.pos))}		#  	#	}	return(list(gene.names,gene.lengths))}if(interactive()) fun()
fun <- function(){#
	gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.")   	gene.names <- as.character(unlist(strsplit(gene.names, ",")))    	gene.lengths <- as.numeric(unlist(strsplit(gene.lengths, ",")))#
#	for (i in 1:gene.num) {#  #		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))#		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#  	#		if (exists("gene.pos") == FALSE) {gene.pos <- c(start.pos,last.pos)}#		else if (exists("gene.pos") == TRUE) {gene.pos <- list(gene.pos,c(start.pos,last.pos))}		#  	#	}	return(list(gene.names,gene.lengths))}if(interactive()) fun()
require(ape)script.dir <- dirname(sys.frame(1)$ofile)fun.data.input <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")#
	data.nexus <- read.nexus(filepath)fun.data.parameters <- function(){#
	gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.")   	gene.names <- as.character(unlist(strsplit(gene.names, ",")))    	gene.lengths <- as.numeric(unlist(strsplit(gene.lengths, ",")))#
#	for (i in 1:gene.num) {#  #		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))#		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#  	#		if (exists("gene.pos") == FALSE) {gene.pos <- c(start.pos,last.pos)}#		else if (exists("gene.pos") == TRUE) {gene.pos <- list(gene.pos,c(start.pos,last.pos))}		#  	#	}	return(list(gene.names,gene.lengths))}if(interactive()) fun()
}
require(ape)script.dir <- dirname(sys.frame(1)$ofile)fun.data.input <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")#
	data.nexus <- read.nexus(filepath)#
}fun.data.parameters <- function(){#
	gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.")   	gene.names <- as.character(unlist(strsplit(gene.names, ",")))    	gene.lengths <- as.numeric(unlist(strsplit(gene.lengths, ",")))#
#	for (i in 1:gene.num) {#  #		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))#		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#  	#		if (exists("gene.pos") == FALSE) {gene.pos <- c(start.pos,last.pos)}#		else if (exists("gene.pos") == TRUE) {gene.pos <- list(gene.pos,c(start.pos,last.pos))}		#  	#	}	return(list(gene.names,gene.lengths))}if(interactive()) fun()
require(ape)script.dir <- dirname(sys.frame(1)$ofile)fun.data.input <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")#
	data.nexus <- read.nexus(filepath)#
}if(interactive()) fun()fun.data.parameters <- function(){#
	gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.")   	gene.names <- as.character(unlist(strsplit(gene.names, ",")))    	gene.lengths <- as.numeric(unlist(strsplit(gene.lengths, ",")))#
#	for (i in 1:gene.num) {#  #		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))#		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#  	#		if (exists("gene.pos") == FALSE) {gene.pos <- c(start.pos,last.pos)}#		else if (exists("gene.pos") == TRUE) {gene.pos <- list(gene.pos,c(start.pos,last.pos))}		#  	#	}	return(list(gene.names,gene.lengths))}if(interactive()) fun()
require(ape)script.dir <- dirname(sys.frame(1)$ofile)fun.data.input <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")#
	data.nexus <- read.nexus(filepath)#
}if(interactive()) fun()
require(ape)script.dir <- dirname(sys.frame(1)$ofile)fun.data.input <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")#
	gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.")   	gene.names <- as.character(unlist(strsplit(gene.names, ",")))    	gene.lengths <- as.numeric(unlist(strsplit(gene.lengths, ",")))#
#	for (i in 1:gene.num) {#  #		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))#		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#  	#		if (exists("gene.pos") == FALSE) {gene.pos <- c(start.pos,last.pos)}#		else if (exists("gene.pos") == TRUE) {gene.pos <- list(gene.pos,c(start.pos,last.pos))}		#  	#	}	return(list(gene.names,gene.lengths))}if(interactive()) fun.data.input()data.nexus <- read.nexus(filepath)
2
require(ape)#script.dir <- dirname(sys.frame(1)$ofile)fun.data.input <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")#
	gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.")   	gene.names <- as.character(unlist(strsplit(gene.names, ",")))    	gene.lengths <- as.numeric(unlist(strsplit(gene.lengths, ",")))#
#	for (i in 1:gene.num) {#  #		start.pos <- readline(paste("What is the first position of gene ",i,"?",sep=""))#		last.pos <- readline(paste("What is the last position of gene ",i,"?",sep=""))#  	#		if (exists("gene.pos") == FALSE) {gene.pos <- c(start.pos,last.pos)}#		else if (exists("gene.pos") == TRUE) {gene.pos <- list(gene.pos,c(start.pos,last.pos))}		#  	#	}	return(list(gene.names,gene.lengths))}if(interactive()) fun.data.input()data.nexus <- read.nexus(filepath)
test
data.path
require(ape)#script.dir <- dirname(sys.frame(1)$ofile)fun.data.input <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")#
	gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.")   	gene.names <- as.character(unlist(strsplit(gene.names, ",")))    	gene.lengths <- as.numeric(unlist(strsplit(gene.lengths, ",")))#
	return(list(gene.names,gene.lengths))}
if(interactive()) fun.data.input()
data.path
ask()
require(ape)#script.dir <- dirname(sys.frame(1)$ofile)fun.data.input <- function(){	data.path <- ask("Enter the complete file path to your nexus file.")#
	gene.num <- ask("How many genes are in your concatenated alignment?")	gene.names <- ask("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- ask("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.")   	gene.names <- as.character(unlist(strsplit(gene.names, ",")))    	gene.lengths <- as.numeric(unlist(strsplit(gene.lengths, ",")))#
#	return(list(gene.names,gene.lengths))}if(interactive()) fun.data.input()
?ask
??ask
fun.data.path <- function(){	readline("Enter the complete file path to your nexus file.")if(interactive()) fun.data.input()	data.path <- fun.data.path()
}
fun.data.path <- function(){	readline("Enter the complete file path to your nexus file.")#
}if(interactive()) fun.data.input()	data.path <- fun.data.path()
data.path
#Get file path to nexus filesfun.data.path <- function(){	readline("Enter the complete file path to your nexus file.")	}if(interactive()) {fun.data.input()}data.path <- file.path(fun.data.path())#
#Get number of genes in the nexus file#
fun.gene.num <- function(){	readline("How many genes are in your concatenated alignment?")}if(interactive()) {fun.gene.num()}	gene.num <- fun.gene.num()#Get gene names#
fun.gene.names <- function() {	readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") }if(interactive()) {fun.gene.names()}	gene.names <- as.character(unlist(strsplit(fun.gene.names(), ",")))  #Get gene lengthsfun.gene.lengths <- function(){		readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") }if(interactive()) {fun.gene.lengths()}gene.lengths <- as.numeric(unlist(strsplit(fun.gene.lengths(), ",")))
require(ape)#Get file path to nexus filesfun.data.path <- function(){	readline("Enter the complete file path to your nexus file.")	}if(interactive()) {fun.data.input()}data.path <- file.path(fun.data.path())#
#Get number of genes in the nexus file#
fun.gene.num <- function(){	readline("How many genes are in your concatenated alignment?")}if(interactive()) {fun.gene.num()}	gene.num <- fun.gene.num()#Get gene names#
fun.gene.names <- function() {	readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") }if(interactive()) {fun.gene.names()}	gene.names <- as.character(unlist(strsplit(fun.gene.names(), ",")))  #Get gene lengthsfun.gene.lengths <- function(){		readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") }if(interactive()) {fun.gene.lengths()}gene.lengths <- as.numeric(unlist(strsplit(fun.gene.lengths(), ",")))
#Get file path to nexus filesfun.data.path <- function(){	readline("Enter the complete file path to your nexus file.")	}if(interactive()) {fun.data.input()}#
#Get number of genes in the nexus file#
fun.gene.num <- function(){	readline("How many genes are in your concatenated alignment?")}if(interactive()) {fun.gene.num()}	#Get gene names#
fun.gene.names <- function() {	readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") }if(interactive()) {fun.gene.names()}	#Get gene lengthsfun.gene.lengths <- function(){		readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") }if(interactive()) {fun.gene.lengths()}#gene.names <- as.character(unlist(strsplit(gene.names, ",")))  #gene.lengths <- as.numeric(unlist(strsplit(gene.lengths, ",")))#
#return(list(gene.names,gene.lengths))data.path <- file.path(fun.data.path())gene.num <- fun.gene.num()gene.names <- as.character(unlist(strsplit(fun.gene.names(), ",")))  gene.lengths <- as.numeric(unlist(strsplit(fun.gene.lengths(), ",")))
fun.data.path <- function(){	readline("Enter the complete file path to your nexus file.")	}if(interactive()) {fun.data.path()}#
#Get number of genes in the nexus file#
fun.gene.num <- function(){	readline("How many genes are in your concatenated alignment?")}if(interactive()) {fun.gene.num()}	#Get gene names#
fun.gene.names <- function() {	readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") }if(interactive()) {fun.gene.names()}	#Get gene lengthsfun.gene.lengths <- function(){		readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") }if(interactive()) {fun.gene.lengths()}#gene.names <- as.character(unlist(strsplit(gene.names, ",")))  #gene.lengths <- as.numeric(unlist(strsplit(gene.lengths, ",")))#
#return(list(gene.names,gene.lengths))data.path <- file.path(fun.data.path())gene.num <- fun.gene.num()gene.names <- as.character(unlist(strsplit(fun.gene.names(), ",")))  gene.lengths <- as.numeric(unlist(strsplit(fun.gene.lengths(), ",")))
cat("What's your name? ")#
x <- readLines(file("stdin"),1)#
print(x)
cat("What's your name? ")x <- readLines(file("stdin"),1)print(x)
require(ape)fun.data.parameters <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")		gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	return(		list(			file.path(data.path),			as.numeric(gene.num),			as.character(unlist(strsplit(fun.gene.names(), ","))),			as.numeric(unlist(strsplit(fun.gene.lengths(), ",")))			)		)}
if(interactive()) {fun.data.parameters()}
require(ape)fun.data.parameters <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")		gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	return(		list(			file.path(data.path),			as.numeric(gene.num),			as.character(unlist(strsplit(gene.names(), ","))),			as.numeric(unlist(strsplit(gene.lengths(), ",")))			)		)}if(interactive()) {fun.data.parameters()}
fun.data.parameters <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")		gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	return(		list(			file.path(data.path),			as.numeric(gene.num),			as.character(unlist(strsplit(gene.names, ","))),			as.numeric(unlist(strsplit(gene.lengths, ",")))			)		)}if(interactive()) {fun.data.parameters()}
fun.data.parameters <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")		gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	return(		list(			file.path(data.path),			as.numeric(gene.num),			as.character(unlist(strsplit(gene.names, ","))),			as.numeric(unlist(strsplit(gene.lengths, ",")))			)		)}if(interactive()) {data.parameters <- fun.data.parameters()}
data.parameters[1]
data.parameters[2]
data.parameters[]
data.parameters[3]
str(data.parameters[1])
fun.data.parameters <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")		gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	return(		list(			file.path(data.path),			as.numeric(gene.num),			as.character(unlist(strsplit(gene.names, ","))),			as.numeric(unlist(strsplit(gene.lengths, ",")))			)		)}if(interactive()) {data.parameters <- fun.data.parameters()}
data.parameters
data.parameters[1]
data.nexus <- read.nexus(data.path)
data.nexus <- read.nexus(data.parameters[1])
data.parameters[1]
as.numeric(data.parameters[1])
data.nexus <- read.nexus(as.character(data.parameters[1]))
?read.nexus
data.nexus <- read.dna(as.character(data.parameters[1]))
data.nexus <- read.nexus.data(as.character(data.parameters[1]))
data.nexus
str(data.nexus)
data.path
require(ape)fun.data.parameters <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")		gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	return(		list(			data.path,			as.numeric(gene.num),			as.character(unlist(strsplit(gene.names, ","))),			as.numeric(unlist(strsplit(gene.lengths, ",")))			)		)}if(interactive()) {data.parameters <- fun.data.parameters()}data.nexus <- read.nexus.data(as.character(data.parameters[1]))for (i in 1:as.numeric(data.parameters[2])) {
require(ape)fun.data.parameters <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")		gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	return(		list(			data.path,			as.numeric(gene.num),			as.character(unlist(strsplit(gene.names, ","))),			as.numeric(unlist(strsplit(gene.lengths, ",")))			)		)}if(interactive()) {data.parameters <- fun.data.parameters()}data.nexus <- read.nexus.data(as.character(data.parameters[1]))#for (i in 1:as.numeric(data.parameters[2])) {
require(ape)fun.data.parameters <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")		gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	return(		list(			data.path,			as.numeric(gene.num),			as.character(unlist(strsplit(gene.names, ","))),			as.numeric(unlist(strsplit(gene.lengths, ",")))			)		)}if(interactive()) {data.parameters <- fun.data.parameters()}data.nexus <- read.nexus.data(as.character(data.parameters[1]))for (i in 1:as.numeric(data.parameters[2])) {}
?io.read
?read
?while
?
?while
?
?break
while(n < 1 ){  n <- readline("enter a positive integer: ")  n <- ifelse(grepl("\\D",n),-1,as.integer(n))  if(is.na(n)){break}  # breaks when hit enter}for (i in 1:as.numeric(data.parameters[2])) {}
n <- -1while(n < 1 ){  n <- readline("enter a positive integer: ")  n <- ifelse(grepl("\\D",n),-1,as.integer(n))  if(is.na(n)){break}  # breaks when hit enter}for (i in 1:as.numeric(data.parameters[2])) {}
require(ape)fun.data.parameters <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")		gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	return(		list(			data.path,			as.numeric(gene.num),			as.character(unlist(strsplit(gene.names, ","))),			as.numeric(unlist(strsplit(gene.lengths, ",")))			)		)}if(interactive()) {data.parameters <- fun.data.parameters()}#data.nexus <- read.nexus.data(as.character(data.parameters[1]))#n <- -1#while(n < 1 ){#  n <- readline("enter a positive integer: ")#  n <- ifelse(grepl("\\D",n),-1,as.integer(n))#  if(is.na(n)){break}  # breaks when hit enter#}#for (i in 1:as.numeric(data.parameters[2])) {}
require(ape)fun.data.parameters <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")		gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	return(		list(			data.path,			as.numeric(gene.num),			as.character(unlist(strsplit(gene.names, ","))),			as.numeric(unlist(strsplit(gene.lengths, ",")))			)		)}#if(interactive()) {data.parameters <- fun.data.parameters()}#data.nexus <- read.nexus.data(as.character(data.parameters[1]))#n <- -1#while(n < 1 ){#  n <- readline("enter a positive integer: ")#  n <- ifelse(grepl("\\D",n),-1,as.integer(n))#  if(is.na(n)){break}  # breaks when hit enter#}#for (i in 1:as.numeric(data.parameters[2])) {}
require(ape)fun.data.parameters <- function(){	data.path <- readline("Enter the complete file path to your nexus file.")		gene.num <- readline("How many genes are in your concatenated alignment?")	gene.names <- readline("Enter the name of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	gene.lengths <- readline("Enter the length of each gene in your alignment, in the order they appear in the alignment, separated by commas.") 	return(		list(			data.path,			as.numeric(gene.num),			as.character(unlist(strsplit(gene.names, ","))),			as.numeric(unlist(strsplit(gene.lengths, ",")))			)		)}#if(interactive()) {data.parameters <- fun.data.parameters()}data.nexus <- read.nexus.data(as.character(data.parameters[1]))#n <- -1#while(n < 1 ){#  n <- readline("enter a positive integer: ")#  n <- ifelse(grepl("\\D",n),-1,as.integer(n))#  if(is.na(n)){break}  # breaks when hit enter#}#for (i in 1:as.numeric(data.parameters[2])) {}
?stdin
stdin
input <- stdin
input
?file.path
file.path(stdin)
### PLACE THIS SCRIPT IN THE SAME FOLDER AS YOUR NEXUS FILE ####Enter the full path to your concatenated nexus filefile.location <- "/Users/Andrew/Desktop/test/LiNayloretal_MPE2012_mmc3.nex"#Enter the names of the genes that make up your concatenated nexus file, in the order of their appearancegene.names <- c(	"ABHD13",	"c3f39",	"KBTBD2",	"PROX1",	"RAG1",	"RAG2",	"SCFD2",	"SLC18A3",	"SLC26A1",	"ZFPM2"	)#Enter the length of the genes that make up your concatenated nexus file, in the order of their appearancegene.lengths <- c(	816,	1398,	1461,	1551,	1344,	1236,	651,	930,	975,	1734	)#
#Enter the taxon sets you would like to iteratively exclude from analysis (using the exact name format that appears in your nexus file)taxa.exclude <- c(	"Danio_rerio Homo_sapiens",	"Danio_rerio Homo_sapiens Hydrolagus_novaezealandiae Callorhinchus_milii"	)	#
### CODE BELOW DOES NOT NEED TO BE MODIFIED ###setwd(file.path(file.location)) #Set working directory to path#Define gene.stop.pos from gene.lengthsfor (a in 1:length(gene.lengths)) {	if (exists("gene.stop.pos") == FALSE) {gene.stop.pos <- gene.lengths[a]}	else if (exists("gene.stop.pos") == TRUE) {gene.stop.pos <- c(gene.stop.pos,(gene.lengths[a]+gene.stop.pos[a-1]))}}file.name <- basename(file.location)file.name.noext <- sub("^([^.]*).*", "\\1",file.name) #Modify file.name to exclude the file extensionrequire(ape) #Used for read.nexus.datadata.nexus <- read.nexus.data(file.name)sink("paup-go.nex") #Write paup-go nexus file	cat("#NEXUS", sep="\n")	cat("", sep="\n")	cat("BEGIN SETS;", sep="\n")#
	for (b in 1:length(taxa.exclude)) {		cat(paste("taxset excludeset",b," = ",taxa.exclude[b],";", sep=""), sep="\n")	}#
	cat("", sep="\n")	cat("BEGIN PAUP;", sep="\n")	cat(paste("log file = ",file.name.noext,"_basefreqs.log replace=yes;", sep=""), sep="\n")	cat(paste("execute ",file.name, sep=""), sep="\n")	cat("", sep="\n")#
	for (c in 1:length(gene.names)) {		cat(paste("charset ",gene.names[c],"_1stpos = 1-",gene.stop.pos[c],"\\3;", sep=""), sep="\n")		cat(paste("charset ",gene.names[c],"_2ndpos = 2-",gene.stop.pos[c],"\\3;", sep=""), sep="\n")		cat(paste("charset ",gene.names[c],"_3rdpos = 3-",gene.stop.pos[c],"\\3;", sep=""), sep="\n")		cat("", sep="\n")	}	#
	for (d in 1:length(gene.names)) {		cat("EXCLUDE all;", sep="\n")		cat(paste("INCLUDE ",gene.names[d],"_2ndpos ",gene.names[d],"_3rdpos;", sep=""), sep="\n")		cat("basefreqs;", sep="\n")		cat("EXCLUDE all;", sep="\n")		cat(paste("INCLUDE ",gene.names[d],"_1stpos ",gene.names[d],"_3rdpos;", sep=""), sep="\n")		cat("basefreqs;", sep="\n")		cat("EXCLUDE all;", sep="\n")		cat(paste("INCLUDE ",gene.names[d],"_1stpos ",gene.names[d],"_2ndpos;", sep=""), sep="\n")		cat("basefreqs;", sep="\n")		cat("", sep="\n")	}#
	for (e in 1:length(taxa.exclude)) {		cat(paste("delete excludeset",b,";", sep=""), sep="\n")		for (d in 1:length(gene.names)) {			cat("EXCLUDE all;", sep="\n")			cat(paste("INCLUDE ",gene.names[d],"_2ndpos ",gene.names[d],"_3rdpos;", sep=""), sep="\n")			cat("basefreqs;", sep="\n")			cat("EXCLUDE all;", sep="\n")			cat(paste("INCLUDE ",gene.names[d],"_1stpos ",gene.names[d],"_3rdpos;", sep=""), sep="\n")			cat("basefreqs;", sep="\n")			cat("EXCLUDE all;", sep="\n")			cat(paste("INCLUDE ",gene.names[d],"_1stpos ",gene.names[d],"_2ndpos;", sep=""), sep="\n")			cat("basefreqs;", sep="\n")			cat("", sep="\n")		}		cat(paste("restore excludeset",b,";", sep=""), sep="\n")			}#
	cat("END;")#
sink() #Stop writing
### PLACE YOUR NEXUS FILE IN THE SAME FOLDER AS THIS SCRIPT ####Enter the full path to your concatenated nexus filefile.location <- "/Users/Andrew/Desktop/test/LiNayloretal_MPE2012_mmc3.nex"#Enter the names of the genes that make up your concatenated nexus file, in the order of their appearancegene.names <- c(	"ABHD13",	"c3f39",	"KBTBD2",	"PROX1",	"RAG1",	"RAG2",	"SCFD2",	"SLC18A3",	"SLC26A1",	"ZFPM2"	)#Enter the length of the genes that make up your concatenated nexus file, in the order of their appearancegene.lengths <- c(	816,	1398,	1461,	1551,	1344,	1236,	651,	930,	975,	1734	)#
#Optional - Enter the taxon sets you would like to iteratively exclude from analysis (using the exact name format that appears in your nexus file)taxa.exclude <- c(	"Danio_rerio Homo_sapiens",	"Danio_rerio Homo_sapiens Hydrolagus_novaezealandiae Callorhinchus_milii"	)#
##
### CODE BELOW DOES NOT NEED TO BE MODIFIED ###source("scripts/prep.r")source("scripts/paup_basefreqs.r")source("scripts/gene_data.r")
if (exists("trees") == FALSE) {#
	source("scripts/read_trees.r")}trees.total.length <- unlist(lapply(trees, function(x) sum(x$edge.length)))trees.total.length.stats <- dir.create(path=file.path("tree_stats")) #Create the subdir for tree statspdf(file=file.path(), width=10, paper=USr)	layout(		matrix(c(0,1), 1,2, byrow=TRUE), #		widths=c(1,0.1)	)#
	plot(		trees.total.length,		xlab="Loci Trees",		ylab="Total Tree Length"	)#
	boxplot(		trees.total.length,		xlab="Loci Trees",		ylab="Total Tree Length"	)
require(ape)
?root
charToRaw(B@CFFFFFHHHHHJJJFHIJIJJJGIIJJJGIJIIJJ?GH?DDHGIJ7B=CFFAG@AEHHHHF@DEDACEDDDD@B;@BB9>@BDDCDCCCDDDBDDDDA)
charToRaw("B@CFFFFFHHHHHJJJFHIJIJJJGIIJJJGIJIIJJ?GH?DDHGIJ7B=CFFAG@AEHHHHF@DEDACEDDDD@B;@BB9>@BDDCDCCCDDDBDDDDA")
as.numeric(charToRaw("B@CFFFFFHHHHHJJJFHIJIJJJGIIJJJGIJIIJJ?GH?DDHGIJ7B=CFFAG@AEHHHHF@DEDACEDDDD@B;@BB9>@BDDCDCCCDDDBDDDDA"))
temp <- as.numeric(charToRaw("B@CFFFFFHHHHHJJJFHIJIJJJGIIJJJGIJIIJJ?GH?DDHGIJ7B=CFFAG@AEHHHHF@DEDACEDDDD@B;@BB9>@BDDCDCCCDDDBDDDDA"))
temp
cat(temp)
temp -33
cat(temp-33)
temp <- temp - 33
temp
10^(-temp/10)
temp <- 10^(-temp/10)
cat(temp)
?writeLines
?read.dna
require(ape)
?read.dna
### INPUT NEXUS FILE PARAMETERS ####Enter the full path to the Decatenater folderfile.location <- "/Users/Andrew/Google Drive/Work/Projects/Plestiodon Anchored Phylo/Scripts/main"#
#Enter PartitionFinder configuration optionsbranchlengths <- "linked" 		# linked | unlinkedmodels <- "all" 				# all | raxml | mrbayes | beastmodel_selection <- "BIC"		# AIC | AICc | BICsearch <- "greedy" 				# all | user | greedy#
### CODE BELOW DOES NOT NEED TO BE MODIFIED ###setwd(file.path(file.location)) #Set working directory to file.locationsource("scripts/read_config.r")#source("scripts/read_gene_data.r")#source("scripts/write_phylip.r")#source("scripts/write_nexus.r")#source("scripts/pf_configs.r")#source("scripts/paup_basefreqs.r")#source("scripts/variable_constant_sites.r")#source("scripts/read_trees.r")#source("scripts/calc_total_tree_lengths.r")
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/generate_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/generate_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
traceback()
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
traceback()
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
?writeLines
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
dir.create(file.path("beast_xml_files")) #Create the subdir for the xml filessource("scripts/beast_xml_file_function.r")#generate.xml.file <- function(fasta.alignment.path, outfile.name, xml.type = "real")generate.xml.file(	file.path(		"phylip_data",		"P0077_L112.phylip"	),	"P0077_L112",	xml.type = "real")
